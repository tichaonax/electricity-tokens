generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model audit_logs {
  id         String   @id
  userId     String
  action     String
  entityType String
  entityId   String
  oldValues  Json?
  newValues  Json?
  metadata   Json?
  timestamp  DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model meter_readings {
  id          String   @id
  userId      String
  reading     Float
  readingDate DateTime
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  users       users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, readingDate])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model token_purchases {
  id                 String              @id
  totalTokens        Float
  totalPayment       Float
  meterReading       Float
  purchaseDate       DateTime
  isEmergency        Boolean             @default(false)
  createdBy          String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  users              users               @relation(fields: [createdBy], references: [id])
  user_contributions user_contributions?
}

model user_contributions {
  id                 String          @id
  purchaseId         String          @unique
  userId             String
  contributionAmount Float
  meterReading       Float
  tokensConsumed     Float
  createdAt          DateTime        @default(now())
  updatedAt          DateTime
  token_purchases    token_purchases @relation(fields: [purchaseId], references: [id])
  users              users           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                    String               @id
  email                 String               @unique
  name                  String
  password              String?
  role                  Role                 @default(USER)
  locked                Boolean              @default(false)
  passwordResetRequired Boolean              @default(false)
  permissions           Json?
  themePreference       String?              @default("system")
  lastLoginAt           DateTime?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime
  isActive              Boolean              @default(true)
  deactivatedAt         DateTime?
  deactivationReason    String?
  deactivatedBy         String?
  accounts              accounts[]
  audit_logs            audit_logs[]
  meter_readings        meter_readings[]
  sessions              sessions[]
  token_purchases       token_purchases[]
  user_contributions    user_contributions[]

  @@index([isActive])
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  USER
}
