generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model AuditLog {
  id         String   @id
  userId     String
  action     String
  entityType String
  entityId   String
  oldValues  Json?
  newValues  Json?
  metadata   Json?
  timestamp  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model MeterReading {
  id          String   @id
  userId      String
  reading     Float
  readingDate DateTime
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, readingDate])
  @@map("meter_readings")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model TokenPurchase {
  id                String             @id
  totalTokens       Float
  totalPayment      Float
  meterReading      Float
  purchaseDate      DateTime
  isEmergency       Boolean            @default(false)
  createdBy         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  user              User               @relation(fields: [createdBy], references: [id])
  userContribution  UserContribution?

  @@map("token_purchases")
}

model UserContribution {
  id                 String        @id
  purchaseId         String        @unique
  userId             String
  contributionAmount Float
  meterReading       Float
  tokensConsumed     Float
  createdAt          DateTime      @default(now())
  updatedAt          DateTime
  tokenPurchase      TokenPurchase @relation(fields: [purchaseId], references: [id])
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_contributions")
}

model User {
  id                    String             @id
  email                 String             @unique
  name                  String
  password              String?
  role                  Role               @default(USER)
  locked                Boolean            @default(false)
  passwordResetRequired Boolean            @default(false)
  permissions           Json?
  themePreference       String?            @default("system")
  lastLoginAt           DateTime?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime
  isActive              Boolean            @default(true)
  deactivatedAt         DateTime?
  deactivationReason    String?
  deactivatedBy         String?
  accounts              Account[]
  auditLogs             AuditLog[]
  meterReadings         MeterReading[]
  sessions              Session[]
  tokenPurchases        TokenPurchase[]
  userContributions     UserContribution[]

  @@index([isActive])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  ADMIN
  USER
}
