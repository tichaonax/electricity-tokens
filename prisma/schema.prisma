// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  name                  String
  password              String?
  role                  Role     @default(USER)
  locked                Boolean  @default(false)
  passwordResetRequired Boolean  @default(false)
  permissions           Json?
  themePreference       String?  @default("system")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  contributions     UserContribution[]
  createdPurchases  TokenPurchase[]
  meterReadings     MeterReading[]
  auditLogs         AuditLog[]
  accounts          Account[]
  sessions          Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model TokenPurchase {
  id           String   @id @default(cuid())
  totalTokens  Float
  totalPayment Float
  meterReading Float    // Initial meter reading when purchase was made
  purchaseDate DateTime
  isEmergency  Boolean  @default(false)
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  creator      User              @relation(fields: [createdBy], references: [id])
  contribution UserContribution? // Changed to optional one-to-one relationship

  @@map("token_purchases")
}

model UserContribution {
  id                String   @id @default(cuid())
  purchaseId        String   @unique // Changed to unique to enforce one contribution per purchase
  userId            String
  contributionAmount Float
  meterReading      Float    // Current meter reading at time of contribution
  tokensConsumed    Float    // Calculated: current - initial meter reading
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  purchase TokenPurchase @relation(fields: [purchaseId], references: [id], onDelete: Restrict)
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Removed compound unique constraint - now using @unique on purchaseId only
  @@map("user_contributions")
}

model AuditLog {
  id         String    @id @default(cuid())
  userId     String
  action     String
  entityType String
  entityId   String
  oldValues  Json?
  newValues  Json?
  timestamp  DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model MeterReading {
  id           String   @id @default(cuid())
  userId       String
  reading      Float
  readingDate  DateTime
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Index for efficient querying by user and date
  @@index([userId, readingDate])
  @@map("meter_readings")
}

enum Role {
  ADMIN
  USER
}
